buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
}

import de.undercouch.gradle.tasks.download.Download

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'signing'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

ext.patch = config.patch_number
ext.resetPatch = false

if (!config.last_release.equals(config.mod_version))
{
    ext.patch = 0

    if (gradle.startParameter.taskNames.contains("release"))
    {
        ext.resetPatch = true
    }
}

if (!config.dev_version.equals(config.mod_version))
{
    ext.patch = 0
}

if (gradle.startParameter.taskNames.contains("release"))
{
    version = "${config.mod_version}.${ext.patch}"
}
else if (gradle.startParameter.taskNames.contains("buildPublic"))
{
	def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
	
    proc.waitFor()
	
    if (proc.exitValue() == 0)
	{
        ext.revision = proc.text.trim()
    } 
	else 
	{
        ext.revision = "GITBORK"
    }
	
    version = "${config.dev_version}.${ext.patch}-${project.revision}"
}
else if (System.getenv("TRAVIS") || System.getenv("TRAVIS").equals("true"))
{
    version = "${config.dev_version}.${ext.patch}-SNAPSHOT"
}
else
{
    version = "${config.dev_version}.${ext.patch}-dev.${config.build_number}"
}

group = "io.github.celestibytes"
archivesBaseName = project.getName()

tasks.withType(JavaCompile) {
    options.incremental = true
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    replaceIn "reference/Reference.java"
    replace "@VERSION@", "${project.version}"
}

version = "${config.minecraft_version}-${project.version}"

processResources {
    exclude '**/*.xcf'
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version': project.version, 'mcversion': config.minecraft_version
    }
}

task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "atomatic/api/**/*"
    }

    from(sourceSets.api.java) {
        include '**'
    }

    extension = 'jar'
    classifier = 'api'
}

task deobfJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    // TODO Is including the APIs really necessary
    from(sourceSets.api.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'deobf'
}

task javadocJar(type: Jar) {
    from javadoc

    extension = 'jar'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource

    extension = 'jar'
    classifier = 'sources'
}

artifacts {
    archives apiJar, deobfJar, javadocJar, sourcesJar
}

signing {
    required {
        gradle.startParameter.taskNames.contains("release") && project.hasProperty("signing.password")
    }

    sign configurations.archives
}

ext.ossrh = false
ext.username = null
ext.password = null

if (System.getenv().containsKey("OSSRH_USERNAME") && System.getenv().containsKey("OSSRH_PASSWORD"))
{
	logger.lifecycle "Environment variables for Sonatype found"
    ext.ossrh = true
    ext.username = System.getenv("OSSRH_USERNAME")
    ext.password = System.getenv("OSSRH_PASSWORD")
}
else if (project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword"))
{
	logger.lifecycle "Local variables for Sonatype found"
    ext.ossrh = true
    ext.username = ossrhUsername
    ext.password = ossrhPassword
}

uploadArchives {
    repositories {
        if (!gradle.startParameter.taskNames.contains("buildPublic"))
        {
            if (ossrh)
            {
                mavenDeployer {
                    beforeDeployment {
                        MavenDeployment deployment -> signing.signPom(deployment)
                    }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: username, password: password)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: username, password: password)
                    }

                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                    }

                    pom.project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'A Minecraft mod'
                        url 'https://github.com/anttikivi/Atomatic'

                        scm {
                            url 'https://github.com/anttikivi/Atomatic'
                            connection 'scm:git:git://github.com/anttikivi/Atomatic.git'
                            developerConnection 'scm:git:git@github.com:anttikivi/Atomatic.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/anttikivi/Atomatic/issues'
                        }

                        licenses {
                            license {
                                name 'GNU GENERAL PUBLIC LICENSE v2'
                                url 'http://www.gnu.org/licenses/gpl-2.0.html'
                            }
                        }

                        developers {
                            developer {
                                id 'pizzana'
                                name 'Antti Kivi'
                                roles {
                                    role 'developer'
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                add project.repositories.mavenLocal()
                logger.lifecycle('Publishing to repo folder')

                mavenDeployer {
                    repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
                }
            }
        }
    }
}

task getCCL(type: Download, dependsOn: "extractUserDev") {
    onlyIf {
        !file("libs/CodeChickenLib-1.7.10-1.1.1.99-dev.jar").exists()
    }
    src 'http://files.minecraftforge.net/maven/codechicken/CodeChickenLib/1.7.10-1.1.1.99/CodeChickenLib-1.7.10-1.1.1.99-dev.jar'
    dest file("libs/CodeChickenLib-1.7.10-1.1.1.99-dev.jar")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

task getCCC(type: Download, dependsOn: "getCCL") {
    onlyIf {
        !file("libs/CodeChickenCore-1.7.10-1.0.4.29-dev.jar").exists()
    }
    src 'http://chickenbones.net/maven/codechicken/CodeChickenCore/1.7.10-1.0.4.29/CodeChickenCore-1.7.10-1.0.4.29-dev.jar'
    dest file("libs/CodeChickenCore-1.7.10-1.0.4.29-dev.jar")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

task getNEI(type: Download, dependsOn: "getCCC") {
    onlyIf {
        !file("libs/NotEnoughItems-1.7.10-1.0.3.77-dev.jar").exists()
    }
    src 'http://chickenbones.net/maven/codechicken/NotEnoughItems/1.7.10-1.0.3.77/NotEnoughItems-1.7.10-1.0.3.77-dev.jar'
    dest file("libs/NotEnoughItems-1.7.10-1.0.3.77-dev.jar")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

task cleanThaumcraft(type: Delete, dependsOn: "getNEI") {
	onlyIf {
		file("libs/Thaumcraft-deobf-1.7.10-4.2.2.0.jar").exists()
	}
	delete file("libs/Thaumcraft-deobf-1.7.10-4.2.2.0.jar")
}

task getThaumcraft(type: Download, dependsOn: "cleanThaumcraft") {
    onlyIf {
        !file("libs/Thaumcraft-deobf-1.7.10-4.2.2.1.jar").exists()
    }
    src 'https://dl.dropboxusercontent.com/u/47135879/Thaumcraft-deobf-1.7.10-4.2.2.1.jar'
    dest file("libs/Thaumcraft-deobf-1.7.10-4.2.2.1.jar")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

task cleanBaubles(type: Delete, dependsOn: "getThaumcraft") {
	onlyIf {
		true // TODO
	}
	logger.lifecycle 'Baubles is not updated yet'
}

task getBaubles(type: Download, dependsOn: "cleanBaubles") {
    onlyIf {
        !file("libs/Baubles-deobf-1.7.10-1.0.1.10.jar").exists()
    }
    src 'https://dl.dropboxusercontent.com/u/47135879/Baubles-deobf-1.7.10-1.0.1.10.jar'
    dest file("libs/Baubles-deobf-1.7.10-1.0.1.10.jar")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

tasks.setupCIWorkspace.dependsOn getBaubles
tasks.setupDevWorkspace.dependsOn getBaubles
tasks.setupDecompWorkspace.dependsOn getBaubles

task handleVersion {
    onlyIf {
        !gradle.startParameter.taskNames.contains("buildPublic")
    }

    doLast {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }

        if (project.resetPatch)
        {
            config.patch_number = 1
            configFile.withWriter {
                config.toProperties().store(it, "")
            }

            config.last_new_release = true
            configFile.withWriter {
                config.toProperties().store(it, "")
            }

            config.last_release = config.mod_version
            configFile.withWriter {
                config.toProperties().store(it, "")
            }
        }
        else if (gradle.startParameter.taskNames.contains("release"))
        {
            config.patch_number = (config.patch_number.toString().toInteger()) + 1
            configFile.withWriter {
                config.toProperties().store(it, "")
            }

            config.last_new_release = false
            configFile.withWriter {
                config.toProperties().store(it, "")
            }

            config.last_release = config.mod_version
            configFile.withWriter {
                config.toProperties().store(it, "")
            }
        }

        def dev = config.dev_version.toString().tokenize('.');
        def ver = config.mod_version.toString().tokenize('.');

        if ((dev.get(0).toInteger() < ver.get(0).toInteger()) || (dev.get(1).toInteger() < ver.get(1).toInteger()))
        {
            config.dev_version = config.mod_version
            configFile.withWriter {
                config.toProperties().store(it, "")
            }
        }
    }
}

tasks.build.dependsOn handleVersion

task buildPublic(dependsOn: ['build', 'reobf', 'deobfJar']) {
    doLast {
        logger.lifecycle "I think I'm done"
    }
}

task release(dependsOn: ['uploadArchives', 'build', 'reobf', 'deobfJar']) {
    doLast {
        logger.lifecycle "I think I'm done"
    }
}
